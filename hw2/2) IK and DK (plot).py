# -*- coding: utf-8 -*-
"""Ro_hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-t8EnNeC5Ce1cthI9l_E4rDY5Z6Oc9V6
"""

import numpy as np 
import sympy as sp
import matplotlib.pyplot as plt

def T_z(l):
     return np.array([ [1, 0, 0, 0],
                        [0, 1, 0, 0],
                        [0, 0, 1, l],
                        [0, 0, 0, 1]
                      ])
def T_x(l):
  return np.array([ [1, 0, 0, l],
                    [0, 1, 0, 0],
                    [0, 0, 1, 0],
                    [0, 0, 0, 1]
                  ])

def R_x(q):
  return np.array([[1,         0,           0,   0],
                  [0, np.math.cos(q), -np.math.sin(q), 0],
                  [0, np.math.sin(q), np.math.cos(q),  0],
                  [0,          0,           0,   1]
                   ])


def R_y(q):                
  return np.array([[np.math.cos(q),    0,      np.math.sin(q), 0],
                  [0,               1,          0,       0],
                  [-np.math.sin(q),    0,      np.math.cos(q), 0],
                  [0,               0,          0,       1]
                  ])
def R_z(q):            
  return np.array([[np.math.cos(q),    -np.math.sin(q),    0,  0],
                  [ np.math.sin(q),     np.math.cos(q),    0,  0],
                  [0,                     0,         1,  0],
                  [0,                     0,         0,  1]
                  ])

def FK(q, l):                     
                     
    T = np.dot(T_z(l[0]), np.dot( R_z(q[0]), np.dot(T_z(l[1]), np.dot(T_x(l[2]), np.dot(R_y(q[1]),np.dot(T_x(l[3]), np.dot(R_y(q[2]),np.dot(T_z(l[4]),np.dot(T_x(l[5]), np.dot(R_x(q[3]), np.dot(R_y(q[4]),np.dot(T_x(l[6]), R_x(q[5])))))))))))))
 
    return T
print(FK([0, 3.14/3, 0, 3, 0, 0],[346, 324, 321, 1075, 225, 1280, 215]))


def IK(T):
    T_123 = np.dot(T, np.linalg.inv(T_x(215)))
    
    x = T_123[0, 3]
    y = T_123[1, 3]
    z = T_123[2, 3]
    q1 = atan2(y, x).evalf()
    
    xys = sqrt(x**2 + y**2) - 225
    z = z - 660
    dq =  atan2(346, 1075).evalf()
    q3 = (-(asin((xys**2 + z ** 2 - 1280**2 - 1075**2) / (2 * 1280 * 1075)) - dq)).evalf()
    print(q3)
    q2 = (atan2(z, xys) + atan2((1075 * sin(q3 - dq)), (1075 + 1280 * cos(q3 - dq)))).evalf()
    print (q2)


    l1, l2, l3, l4, l5, l6, dq = symbols('l1 l2 l3 l4 l5 l6 dq')

    H0_3 = Tz(l1) * Rz(q1) * Tz(l2) * Tx(l3) * Ry(q2) * Tz(l4) * Ry(q3 - dq) * Tx(l5)

    R0_3 = H0_3.subs([(l1, 127), (l2, 330), (l3, 50), (l4, 440), (l5, 421.5), (dq, atan2(420, 35))])

    R3_6 = R0_3.inv() * T

    q4 = atan2(R3_6[1][0], R3_6[2][0])

    q5 = np.arccos(R3_6[2][2])
    
    q6 = np.arccos(-R3_6[2][0]/np.sin(q5))
    
    return np.array([q1,q2, q3, q4, q5, q6])
H = np.array([[ 5.00459689e-01,  1.22176036e-01, -8.57095745e-01,  1.80197736e+03],
               [ 0.00000000e+00, -9.89992497e-01, -1.41120008e-01,  0.00000000e+00],
               [-8.65759839e-01,  7.06248753e-02, -4.95451337e-01, -1.44239936e+03],
               [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
print(IK(H))







V = np.array([[2.5, 1.5], [3, 0], [0, 3]])
origin = [-80], [-80]  # origin point
plt.quiver(*origin, V[:, 0], V[:, 1], color=['r', 'b', 'g'], scale=30)

origin1 = [-77.3], [-21]  # origin point
plt.quiver(*origin1, V[:, 0], V[:, 1], color=['b', 'g', 'r'], scale=30)

origin2 = [-41], [-20]  # origin point
plt.quiver(*origin2, V[:, 0], V[:, 1], color=['b', 'r', 'g'], scale=30)

origin3 = [-42], [28]  # origin point
plt.quiver(*origin3, V[:, 0], V[:, 1], color=['b', 'g', 'r'], scale=30)

origin4 = [1], [70]  # origin point
plt.quiver(*origin4, V[:, 0], V[:, 1], color=['b', 'g', 'r'], scale=30)

V1 = np.array([[-2.5, -1.5], [-3, 0], [0, 3]])

origin5 = [45], [70]  # origin point
plt.quiver(*origin5, V1[:, 0], V1[:, 1], color=['g', 'r', 'b'], scale=30)

V2 = np.array([[-2.5, -1.5], [3, 0], [0, 3]])

origin6 = [79], [70]  # origin point
plt.quiver(*origin6, V2[:, 0], V2[:, 1], color=['r', 'g', 'b'], scale=30)

#  cylinder
circle1 = plt.Circle((-78, -80), 8, color='y', fill=False)
circle2 = plt.Circle((-78, -60), 8, color='y', fill=False)
circle3 = plt.Circle((-42, -20), 8, color='y', fill=False)
circle4 = plt.Circle((-42, 28), 8, color='y', fill=False)
circle5 = plt.Circle((-14, 60), 8, color='y', fill=False)
circle6 = plt.Circle((12, 60), 8, color='y', fill=False)
circle7 = plt.Circle((37, 60), 8, color='y', fill=False)
circle8 = plt.Circle((68, 60), 8, color='y', fill=False)
circle9 = plt.Circle((90, 60), 8, color='y', fill=False)
x1, y1 = [-86, -86], [-80, -60]
x2, y2 = [-70, -70], [-80, -60]
x8, y8 = [-14, 12], [68, 68]
x9, y9 = [-14, 12], [52, 52]
x12, y12 = [68, 90], [68, 68]
x13, y13 = [68, 90], [52, 52]
plt.plot(x1, y1, x2, y2, x8, y8, x9, y9, x12, y12, x13, y13, color='y')
plt.gcf().gca().add_artist(circle1)
plt.gcf().gca().add_artist(circle2)
plt.gcf().gca().add_artist(circle3)
plt.gcf().gca().add_artist(circle4)
plt.gcf().gca().add_artist(circle5)
plt.gcf().gca().add_artist(circle6)
plt.gcf().gca().add_artist(circle7)
plt.gcf().gca().add_artist(circle8)
plt.gcf().gca().add_artist(circle9)
# line
x3, y3 = [-77.3, -77.3], [-60, -20]
plt.plot(x3, y3, color='black', marker='o')
x4, y4 = [-77.3, -50], [-20, -20]
x5, y5 = [-42, -42], [-12, 20]
x6, y6 = [-42, -42], [36, 60]
x10, y10 = [12, 29], [60, 60]
x11, y11 = [45, 60], [60, 60]
plt.plot(x4, y4, x5, y5, x6, y6, x10, y10, x11, y11, color='black')
x7, y7 = [-42, -14], [60, 60]
plt.plot(x7, y7, color='black', marker='o')
plt.xlim(-100, 100)
plt.ylim(-100, 100)
plt.show()
